// SPDX-License-Identifier: MIT

/* 
*    ================================================================
*        This token contract was generated by using Pinky Finance  
*                    Webiste: https://pinky.finance
*    ================================================================
*/

pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

contract TaxToken is Context, IERC20, IERC20Metadata, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isAutomaticMarketMaker;

    address public teamWallet;

    uint256 public MaxSupply;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    uint256 public _liquidityFee = 3;
    uint256 public _teamFee = 15;
    uint256 public _burnFee = 2;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    uint256 public _maxTxAmount;

    event TaxFeeUpdated(uint256 totalFee);
    event MaxTxAmountUpdated(uint256 updatingTxAmount);
    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiquidity
    );

    constructor(
        string memory name_,
        string memory symbol_,
        uint8 decimals_,
        uint256 totalSupply_,
        uint256 maxSupply_,
        uint256 maxTxAmount_,
        address router_,
        address teamWallet_,
        address serviceFeeReceiver_,
        uint256 serviceFee_
    ) payable {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _maxTxAmount = maxTxAmount_;
        MaxSupply = maxSupply_;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            router_
        );

        teamWallet = teamWallet_;

        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[teamWallet] = true;
        _isAutomaticMarketMaker[uniswapV2Pair] = true;

        _mint(_msgSender(), totalSupply_);

        payable(serviceFeeReceiver_).transfer(serviceFee_);
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external override returns (bool) {
        require(to != address(0) || to != address(this));
        if (from != msg.sender) {
            // _decreaseAllowance(from, msg.sender, value);
            uint256 allowed = _allowances[from][msg.sender];
            if (allowed != type(uint256).max) {
                require(
                    allowed >= value,
                    "BEP20: request exceeds allowance"
                );
                uint256 reduced = allowed - value;
                _allowances[from][msg.sender] = reduced;
                emit Approval(from, msg.sender, reduced);
            }
        }
        _transfer(from, to, value);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(
            currentAllowance >= subtractedValue,
            "BEP20: decreased allowance below zero"
        );
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");

        uint256 _TeamAmt;
        uint256 _liquidityAmt;
        uint256 _burnAmt;
        if (
            _isAutomaticMarketMaker[sender] ||
            _isAutomaticMarketMaker[recipient]
        ) {
            if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {
                _TeamAmt = 0;
                _liquidityAmt = 0;
                _burnAmt = 0;
            } else {
                require(amount <= _maxTxAmount, "Transaction limit Exceeded!");
                _TeamAmt = amount.mul(_teamFee).div(10000);
                _liquidityAmt = amount.mul(_liquidityFee).div(10000);
                _burnAmt = amount.mul(_burnFee).div(10000);
            }
        } else {
            _TeamAmt = 0;
            _liquidityAmt = 0;
            _burnAmt = 0;
        }

        uint256 senderBalance = _balances[sender];
        require(
            senderBalance >= amount,
            "Transfer amount exceeds balance"
        );
        _balances[sender] = senderBalance - amount;
        _balances[teamWallet] += _TeamAmt;
        _balances[address(this)] += _liquidityAmt;
        if (_burnAmt > 0) {
            _totalSupply -= _burnAmt;
            emit Transfer(sender, address(0), _burnAmt);
        }
        _balances[recipient] += amount.sub(_TeamAmt).sub(_liquidityAmt).sub(
            _burnAmt
        );
        if (_TeamAmt > 0) {
            emit Transfer(sender, teamWallet, _TeamAmt);
        }
        emit Transfer(
            sender,
            recipient,
            amount.sub(_TeamAmt).sub(_liquidityAmt).sub(_burnAmt)
        );
    }

    function updateFees(
        uint256 liquidityFee,
        uint256 burnFee,
        uint256 teamFee
    ) external onlyOwner {
        require(
            liquidityFee.add(burnFee).add(teamFee) <= 2500,
            "You cannott set fee more than 25%"
        );
        _liquidityFee = liquidityFee;
        _burnFee = burnFee;
        _teamFee = teamFee;

        emit TaxFeeUpdated(liquidityFee.add(burnFee).add(teamFee));
    }

    function ExcludeOrIncludeFromFee(address Account, bool status)
        external
        onlyOwner
    {
        require(Account != address(0), "You can't exclude zero address!");
        _isExcludedFromFee[Account] = status;
    }

    function isExcludedFromFee(address Account) external view returns (bool) {
        return _isExcludedFromFee[Account];
    }

    function isAutomaticMarketMaker(address account) external view returns (bool)
    {
        return _isAutomaticMarketMaker[account];
    }

    function SetAutomaticMarketMaker(address Account, bool status) external onlyOwner
    {
        require(Account != address(0), "You can't exclude zero address!");
        _isAutomaticMarketMaker[Account] = status;
    }

    function setMaxTxPercentage(uint256 maxTxPercentage) external onlyOwner {
        require(
            maxTxPercentage >= 1,
            "Percentage should be greater or equal to 1!"
        );
        _maxTxAmount = _totalSupply.mul(maxTxPercentage).div(10**2);
        emit MaxTxAmountUpdated(_maxTxAmount);
    }

    function _mint(address account, uint256 amount) public virtual onlyOwner {
        uint256 Amount = amount;
        require(
            _totalSupply.add(Amount) <= MaxSupply,
            "You can't mint more than MaxSupply"
        );
        require(account != address(0), "mint to the zero address");

        _beforeTokenTransfer(address(0), account, Amount);

        _totalSupply += Amount;
        _balances[account] += Amount;
        emit Transfer(address(0), account, Amount);
    }

    function _burn(uint256 amount) external virtual {
        uint256 Amount = amount;
        address account = msg.sender;
        require(account != address(0), "burn from the zero address");

        _beforeTokenTransfer(account, address(0), Amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= Amount, "burn amount exceeds balance");
        _balances[account] = accountBalance - Amount;
        _totalSupply -= Amount;

        emit Transfer(account, address(0), Amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "approve from the zero address");
        require(spender != address(0), "approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}